name: Update All Branches from Main

on:
  schedule:
    - cron: '0 */4 * * *'  # Runs every 4 hours
  workflow_dispatch:  # Allows manual trigger

jobs:
  update-branches:
    runs-on: ubuntu-latest
    permissions:
      contents: write  # Required to push updates

    steps:
      - name: Set Git Identity (Fix Empty Ident Error)
        run: |
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "github-actions@github.com"

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all branches

      - name: Ensure logs directory and log file exist
        run: |
          mkdir -p logs
          touch logs/branch_update_log.txt  # Creates the file if it doesn’t exist

      - name: Append new log entry to log file (Ensure Change is Detected)
        run: |
          TIMESTAMP=$(date)
          echo "--- [$TIMESTAMP] - Sync Fork with Upstream ---" >> logs/branch_update_log.txt
          echo "- ✅ Log updated at: $TIMESTAMP" >> logs/branch_update_log.txt
          echo "" >> logs/branch_update_log.txt

      - name: Ensure Git Tracks Log File (Fix .gitignore Issues)
        run: |
          git add -f logs/branch_update_log.txt
          git update-index --refresh  # Ensure Git recognizes changes

      - name: Check if There Are Changes
        id: git_status
        run: |
          if git diff --quiet && git diff --staged --quiet; then
            echo "No changes detected."
            echo "HAS_CHANGES=false" >> $GITHUB_ENV
          else
            echo "Changes detected."
            echo "HAS_CHANGES=true" >> $GITHUB_ENV
          fi

      - name: Commit log files if changes exist (Fix Silent Push Errors)
        if: env.HAS_CHANGES == 'true'
        run: |
          git commit -m "Update branch update logs"

      - name: Push Changes to Main (Ensure Updates Are Applied)
        if: env.HAS_CHANGES == 'true'
        run: |
          git push origin main --force || echo "No log updates to push"

      - name: Merge main into other branches (Fix Checkout Error)
        run: |
          for branch in $BRANCHES; do
            git checkout $branch || continue  # Skip if checkout fails
            git merge origin/main --no-edit || echo "Skipping merge due to conflicts"
            git push origin $branch || echo "No changes to push for $branch"
          done
